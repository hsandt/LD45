{
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns":
			[
				"build",
				"intermediate"
			]
		}
	],
	"build_systems":
	[
		{
			"name": "Dev: analyze engine scripts (intermediate release)",
			"shell": true,
			"working_dir": "${project_path}",
			"cmd": ["python3 -m pico-boots.scripts.analyze intermediate/release/pico-boots"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Dev: analyze game scripts (intermediate release)",
			"shell": true,
			"working_dir": "${project_path}",
			"cmd": ["python3 -m pico-boots.scripts.analyze intermediate/release/src"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Dev: generate dependency graph",
			"shell": true,
			"working_dir": "${project_path}",
			"cmd": ["python3 -m pico-boots.scripts.generate_dependency_graph log/dependency_graph.dot src pico-boots/src"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Dev: generate ordered require file for unity build (for testing)",
			"shell": true,
			"working_dir": "${project_path}",
			"cmd": ["python3 -m pico-boots.scripts.generate_ordered_require_file log/ordered_require.lua main src pico-boots/src"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Debug: print data",
			"shell": true,
			"cmd": ["lua src/debug/print_data.lua"],
			"file_regex": "((?:pico-boots/src|src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"working_dir": "${project_path}",
			"env": {
				"LUA_PATH": "pico-boots/src/?.lua;src/?.lua"
			}
		},
		{
			"name": "Engine: setup",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["./setup.sh"],
			"syntax": "Packages/Python/Python.sublime-syntax",
		},
		{
			"name": "Game: edit data",
			"shell": true,
			"cmd": ["./edit_data.sh"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit metadata",
			"shell": true,
			"cmd": ["./edit_metadata.sh"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit data serialize (alphabet)",
			"shell": true,
			"cmd": ["./edit_data_serialize.sh"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: build game",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_game.sh debug"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_game.sh debug"]
				},
				{
					"name": "debug-ultrafast",
					"cmd": ["./build_game.sh debug-ultrafast"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_game.sh cheat"]
				},
				{
					"name": "ultrafast",
					"cmd": ["./build_game.sh ultrafast"]
				},
				{
					"name": "cheat-ultrafast",
					"cmd": ["./build_game.sh cheat-ultrafast"]
				},
				{
					"name": "sandbox",
					"cmd": ["./build_game.sh sandbox"]
				},
				{
					"name": "release",
					"cmd": ["./build_game.sh release"]
				}
			]
		},
		{
			"name": "Game: build itests",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_itest.sh"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: build and reload or run",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_game.sh debug && (./pico-boots/scripts/reload.sh || ./run_game.sh debug)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_game.sh debug && (./pico-boots/scripts/reload.sh || ./run_game.sh debug)"]
				},
				{
					"name": "debug-ultrafast",
					"cmd": ["./build_game.sh debug-ultrafast && (./pico-boots/scripts/reload.sh || ./run_game.sh debug-ultrafast)"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_game.sh cheat && (./pico-boots/scripts/reload.sh || ./run_game.sh cheat)"]
				},
				{
					"name": "ultrafast",
					"cmd": ["./build_game.sh ultrafast && (./pico-boots/scripts/reload.sh || ./run_game.sh ultrafast)"]
				},
				{
					"name": "cheat-ultrafast",
					"cmd": ["./build_game.sh cheat-ultrafast && (./pico-boots/scripts/reload.sh || ./run_game.sh cheat-ultrafast)"]
				},
				{
					"name": "sandbox",
					"cmd": ["./build_game.sh sandbox && (./pico-boots/scripts/reload.sh || ./run_game.sh sandbox)"]
				},
				{
					"name": "release",
					"cmd": ["./build_game.sh release && (./pico-boots/scripts/reload.sh || ./run_game.sh release)"]
				}
			]
		},
		{
			"name": "Game: build and reload or run itests",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_itest.sh && (./pico-boots/scripts/reload.sh || ./run_itest.sh)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: serialize text into carts > wit_fighter_text_data_en_with_code[dot]p8",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_serialize.sh debug && ./run_serialize.sh debug"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_serialize.sh debug &&  ./run_serialize.sh debug"]
				},
				{
					"name": "release",
					"cmd": ["./build_serialize.sh release && ./run_serialize.sh release"]
				}
			]
		},
		{
			"name": "Game: start",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./run_game.sh debug"],
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./run_game.sh debug"]
				},
				{
					"name": "debug-ultrafast",
					"cmd": ["./run_game.sh debug-ultrafast"]
				},
				{
					"name": "cheat",
					"cmd": ["./run_game.sh cheat"]
				},
				{
					"name": "ultrafast",
					"cmd": ["./run_game.sh ultrafast"]
				},
				{
					"name": "cheat-ultrafast",
					"cmd": ["./run_game.sh cheat-ultrafast"]
				},
				{
					"name": "sandbox",
					"cmd": ["./run_game.sh sandbox"]
				},
				{
					"name": "release",
					"cmd": ["./run_game.sh release"]
				},
				{
					"name": "itests",
					"cmd": ["./run_itest.sh"],
				}
			]
		},
		{
			"name": "Game: install cartridge",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./install_cartridge.sh debug"],
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./install_cartridge.sh debug"]
				},
				{
					"name": "cheat",
					"cmd": ["./install_cartridge.sh cheat"]
				},
				{
					"name": "release",
					"cmd": ["./install_cartridge.sh release"]
				}
			]
		},
		{
			"name": "Game: export and patch cartridge release",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./export_and_patch_cartridge_release.sh"],
		},
		{
			"name": "Game: upload cartridge release",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./upload_cartridge_release.sh"],
		},
		{
			"name": "Game: build game release, export and patch it, upload it",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_game.sh release && ./install_cartridge.sh release && ./export_and_patch_cartridge_release.sh && ./upload_cartridge_release.sh"],
		},
		{
			"name": "Game: test",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./test.sh -f $file_base_name"],
			// known limitation: last \n won't be detected in build output, so cannot display multi-line errors
			"file_regex": "((?:pico-boots/src|src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "(solo)",
					"cmd": ["./test.sh -f $file_base_name -m solo"]
				},
				{
					"name": "(all)",
					"cmd": ["./test.sh -f $file_base_name -m all"]
				},
				{
					"name": "*",
					"cmd": ["./test.sh"]
				},
				{
					"name": "* (solo)",
					"cmd": ["./test.sh -m solo"]
				},
				{
					"name": "* (all)",
					"cmd": ["./test.sh -m all"]
				},
				{
					"name": "headless_itests",
					"cmd": ["./test.sh -f headless_itests"],
				},
				{
					"name": "headless_itests (render)",
					"cmd": ["./test.sh -f headless_itests"],
					"env": {
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests - solo",
					"cmd": ["./test.sh -f headless_itests -m solo"],
				},
				{
					"name": "headless_itests - solo (render)",
					"cmd": ["./test.sh -f headless_itests -m solo"],
					"env": {
						"ENABLE_RENDER": "1"
					}
				}
			]
		},
		{
			"name": "Engine: test",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["./test.sh -f $file_base_name"],
			// known limitation: last \n won't be detected in build output, so cannot display multi-line errors
			"file_regex": "((?:src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "(solo)",
					"cmd": ["./test.sh -f $file_base_name -m solo"]
				},
				{
					"name": "(all)",
					"cmd": ["./test.sh -f $file_base_name -m all"]
				},
				{
					"name": "*",
					"cmd": ["./test.sh"]
				},
				{
					"name": "* (solo)",
					"cmd": ["./test.sh -m solo"]
				},
				{
					"name": "* (all)",
					"cmd": ["./test.sh -m all"]
				}
			]
		},
		{
			"name": "All: test",
			"working_dir": "${project_path}",
			"shell": true,
			// note that luacov report is generated in the working directory, so the second test report will overwrite the previous one
			"cmd": ["./test.sh && echo '' && pico-boots/test.sh"],
			// known limitation: last \n won't be detected in build output, so cannot display multi-line errors
			"file_regex": "((?:pico-boots/src|src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					// if you aim for 100% coverage including render methods
					"name": "(render)",
					"cmd": ["./test.sh && echo '' && pico-boots/test.sh"],
					"env": {
						"ENABLE_RENDER": "1"
					}
				},
				{
					// if you aim for 100% coverage including render methods
					"name": "(utests only)",
					"cmd": ["./test.sh && echo '' && pico-boots/test.sh"],
					"env": {
						"ITEST_MODE": "ignore"
					}
				}
			]
		},
		{
			"name": "Engine: Postbuild: test add_metadata",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_add_metadata"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test add_require",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_add_require"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test analyze",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_analyze"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test minify",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_minify"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test unify",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_unify"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test generate_dependency_graph",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_generate_dependency_graph"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test generate_ordered_require_file",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_generate_ordered_require_file"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test adapt_for_png",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_adapt_for_png"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test patch_pico8_js",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_patch_pico8_js"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "lua: parse",
			"selector": "source.lua,source.p8",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["luac -p $file"],
			"file_regex": "((?:src|tests)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)"
		}
	],
	"syntax_override":
	{
		"\\.lua$":
		[
			// use 1st line if using PICO-8 from Package Control,
			// 2nd line if using version from GitHub (more features)
			// "PICO-8/PICO-8"
			"sublime-PICO-8/PICO-8"
		],
		"\\.luacov":
		[
			"Lua/Lua"
		]
	}
}
